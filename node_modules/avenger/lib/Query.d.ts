import * as TE from 'fp-ts/lib/TaskEither';
import { Cache } from './Cache';
import * as S from './Strategy';
import * as Eq from 'fp-ts/lib/Eq';
import * as CV from './CacheValue';
import { EnforceNonEmptyRecord, ObservableQueries, ProductA, ProductL, ProductP } from './util';
export declare type Fetch<A, L, P> = (input: A) => TE.TaskEither<L, P>;
interface BaseQuery<A, L, P> {
    _A: A;
    _L: L;
    _P: P;
    inputEq: Eq.Eq<A>;
    run: Fetch<A, L, P>;
    invalidate: Fetch<A, L, P>;
}
export interface CachedQuery<A, L, P> extends BaseQuery<A, L, P> {
    type: 'cached';
    cache: Cache<A, L, P>;
}
export interface Composition<A, L, P> extends BaseQuery<A, L, P> {
    type: 'composition';
    master: ObservableQuery<A, L, unknown>;
    slave: ObservableQuery<unknown, L, P>;
}
export interface Product<A, L, P> extends BaseQuery<A, L, P> {
    type: 'product';
    queries: Record<string, ObservableQuery<A[keyof A], L, P[keyof P]>>;
}
export declare type ObservableQuery<A, L, P> = CachedQuery<A, L, P> | Composition<A, L, P> | Product<A, L, P>;
export declare function query<A = void, L = unknown, P = unknown>(fetch: Fetch<A, L, P>): (strategy: S.Strategy<A, L, P>) => CachedQuery<A, L, P>;
export declare type StrategyBuilder<A, L, P> = (inputEq: Eq.Eq<A>, cacheValueEq: Eq.Eq<CV.CacheValue<L, P>>) => S.Strategy<A, L, P>;
export declare function queryStrict<A = void, L = unknown, P = unknown>(fetch: Fetch<A, L, P>, makeStrategy: StrategyBuilder<A, L, P>): CachedQuery<A, L, P>;
export declare function queryShallow<A = void, L = unknown, P = unknown>(fetch: Fetch<A, L, P>, makeStrategy: StrategyBuilder<A, L, P>): CachedQuery<A, L, P>;
export declare function compose<A1, L1, P1, L2, P2>(master: ObservableQuery<A1, L1, P1>, slave: ObservableQuery<P1, L2, P2>): Composition<A1, L1 | L2, P2>;
export declare function product<R extends ObservableQueries>(queries: EnforceNonEmptyRecord<R>): Product<ProductA<R>, ProductL<R>, ProductP<R>>;
export declare function map<U, L, A, B>(fa: ObservableQuery<U, L, A>, f: (a: A) => B): ObservableQuery<U, L, B>;
export {};
