import * as CV from './CacheValue';
import * as Eq from 'fp-ts/lib/Eq';
declare module 'fp-ts/lib/HKT' {
    interface URItoKind3<R, E, A> {
        Strategy: Strategy<R, E, A>;
    }
}
export declare const URI = "Strategy";
export declare type URI = typeof URI;
export interface Strategy<R, E, A> {
    readonly inputEq: Eq.Eq<R>;
    readonly filter: (cacheValue: CV.CacheValue<E, A>) => boolean;
    readonly cacheValueEq: Eq.Eq<CV.CacheValue<E, A>>;
}
export declare function fromSuccessFilter<R, E, A>(inputEq: Eq.Eq<R>, filter: (value: A, updated: Date) => boolean, cacheValueEq: Eq.Eq<CV.CacheValue<E, A>>): Strategy<R, E, A>;
export declare function available<R, E, A>(inputEq: Eq.Eq<R>, cacheValueEq: Eq.Eq<CV.CacheValue<E, A>>): Strategy<R, E, A>;
export declare function refetch<R, E, A>(inputEq: Eq.Eq<R>, cacheValueEq: Eq.Eq<CV.CacheValue<E, A>>): Strategy<R, E, A>;
export declare function expire(afterMs: number): <R, E, A>(inputEq: Eq.Eq<R>, cacheValueEq: Eq.Eq<CV.CacheValue<E, A>>) => Strategy<R, E, A>;
export declare function shallowEqual(a: unknown, b: unknown): boolean;
export declare const eqShallow: Eq.Eq<unknown>;
export declare const strategy: {
    URI: string;
};
