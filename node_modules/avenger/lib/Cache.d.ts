import { Observable } from 'rxjs';
import * as CV from './CacheValue';
import { Fetch } from './Query';
import * as TE from 'fp-ts/lib/TaskEither';
import * as S from './Strategy';
export declare class Cache<A, L, P> {
    readonly fetch: Fetch<A, L, P>;
    readonly strategy: S.Strategy<A, L, P>;
    private subjects;
    private readonly _lookup;
    constructor(fetch: Fetch<A, L, P>, strategy: S.Strategy<A, L, P>);
    private readonly lookup;
    private readonly member;
    private readonly unsafeLookup;
    private emitEvent;
    private getOrCreateSubject;
    private createPending;
    run: (input: A) => TE.TaskEither<L, P>;
    private sameInvalidationFrame;
    invalidate: (input: A) => TE.TaskEither<L, P>;
    observe: (input: A) => Observable<CV.CacheValue<L, P>>;
}
