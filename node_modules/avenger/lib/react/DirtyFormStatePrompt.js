"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var function_1 = require("fp-ts/lib/function");
var declareQueries_1 = require("./declareQueries");
var location_1 = require("../browser/location");
var pipeable_1 = require("fp-ts/lib/pipeable");
var QR = require("../QueryResult");
var queries = declareQueries_1.declareQueries({ pendingUpdateLocation: location_1.pendingUpdateLocation });
var DirtyFormStatePrompt = (function (_super) {
    __extends(DirtyFormStatePrompt, _super);
    function DirtyFormStatePrompt() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.unblock = function () { };
        _this.onBeforeUnload = function (event) {
            event.preventDefault();
            event.returnValue = '';
        };
        return _this;
    }
    DirtyFormStatePrompt.prototype.componentDidMount = function () {
        window.addEventListener('beforeunload', this.onBeforeUnload);
        this.unblock = location_1.requestConfirmationToUpdateLocation();
    };
    DirtyFormStatePrompt.prototype.componentWillUnmount = function () {
        window.removeEventListener('beforeunload', this.onBeforeUnload);
        this.unblock();
    };
    DirtyFormStatePrompt.prototype.render = function () {
        var _this = this;
        return pipeable_1.pipe(this.props.queries, QR.fold(function_1.constNull, function_1.constNull, function (_a) {
            var isPending = _a.pendingUpdateLocation;
            return isPending
                ? _this.props.renderConfirmation(function () {
                    location_1.doResolvePendingUpdateLocation(false)();
                }, function () {
                    location_1.doResolvePendingUpdateLocation(true)();
                })
                : null;
        }));
    };
    return DirtyFormStatePrompt;
}(React.Component));
exports.default = queries(DirtyFormStatePrompt);
