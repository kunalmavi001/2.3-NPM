import * as React from 'react';
import * as QR from '../QueryResult';
import { ObservableQueries, EnforceNonEmptyRecord, ProductA, ProductL, ProductP } from '../util';
import { Semigroup } from 'fp-ts/lib/Semigroup';
declare type QueryInputProps<A> = A extends void ? {} : {
    queries: A;
};
declare type QueryOutputProps<L, P> = {
    queries: QR.QueryResult<L, P>;
};
declare type InputProps<Props, A> = Omit<Props, 'queries'> & QueryInputProps<A>;
export interface DeclareQueriesReturn<A, L, P> {
    <Props extends QueryOutputProps<L, P>>(component: React.ComponentType<Props>): React.ComponentType<InputProps<Props, A>>;
    InputProps: QueryInputProps<A>;
    Props: QueryOutputProps<L, P>;
}
export declare function declareQueries<R extends ObservableQueries>(queries: EnforceNonEmptyRecord<R>, resultSemigroup?: Semigroup<QR.QueryResult<ProductL<R>, ProductP<R>>>): DeclareQueriesReturn<ProductA<R>, ProductL<R>, ProductP<R>>;
export {};
