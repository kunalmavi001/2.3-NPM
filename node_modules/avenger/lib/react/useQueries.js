"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useQueries = exports.useQuery = void 0;
var O = require("fp-ts/lib/Option");
var QR = require("../QueryResult");
var Query_1 = require("../Query");
var Semigroup_1 = require("./Semigroup");
var Observable_1 = require("../Observable");
var observe_1 = require("../observe");
var Strategy_1 = require("../Strategy");
var react_1 = require("react");
var pipeable_1 = require("fp-ts/lib/pipeable");
var function_1 = require("fp-ts/lib/function");
function usePrevious(value) {
    var ref = react_1.useRef();
    react_1.useEffect(function () {
        ref.current = value;
    });
    return O.fromNullable(ref.current);
}
function useQuery(query, params, resultSemigroup) {
    var _resultSemigroup = resultSemigroup || Semigroup_1.keepQueryResultSemigroup();
    var _a = react_1.useState(QR.queryResultLoading), state = _a[0], setState = _a[1];
    var previousInput = usePrevious(params);
    var _b = react_1.useState(0), inputEquality = _b[0], setInputEquality = _b[1];
    react_1.useEffect(function () {
        var inputChanged = pipeable_1.pipe(previousInput, O.fold(function_1.constFalse, function (previousInput) { return !query.inputEq.equals(previousInput, params); }));
        if (inputChanged) {
            setInputEquality(inputEquality + 1);
        }
    });
    var lastState = react_1.useRef(state);
    react_1.useEffect(function () {
        lastState.current = state;
    }, [state]);
    var lastParams = react_1.useMemo(function () { return params; }, [inputEquality]);
    react_1.useEffect(function () {
        var subscription = Observable_1.observable
            .map(observe_1.observeShallow(query, lastParams), function (r) {
            return _resultSemigroup.concat(lastState.current, r);
        })
            .subscribe(setState);
        return function () {
            subscription.unsubscribe();
        };
    }, [query, lastParams]);
    return state;
}
exports.useQuery = useQuery;
function useQueries(queries, params, resultSemigroup) {
    var previousQueries = usePrevious(queries);
    var _a = react_1.useState(0), queriesEquality = _a[0], setQueriesEquality = _a[1];
    var queryProduct = react_1.useMemo(function () { return Query_1.product(queries); }, [queriesEquality]);
    react_1.useEffect(function () {
        var queriesChanged = pipeable_1.pipe(previousQueries, O.fold(function_1.constFalse, function (previousQueries) { return !Strategy_1.eqShallow.equals(previousQueries, queries); }));
        if (queriesChanged) {
            setQueriesEquality(queriesEquality + 1);
        }
    });
    return useQuery(queryProduct, (params || {}), resultSemigroup);
}
exports.useQueries = useQueries;
exports.default = useQueries;
