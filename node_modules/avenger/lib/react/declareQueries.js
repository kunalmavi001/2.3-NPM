"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.declareQueries = void 0;
var React = require("react");
var QR = require("../QueryResult");
var Semigroup_1 = require("./Semigroup");
var Observable_1 = require("../Observable");
var observe_1 = require("../observe");
var Query_1 = require("../Query");
var O = require("fp-ts/lib/Option");
function declareQueries(queries, resultSemigroup) {
    var _resultSemigroup = resultSemigroup || Semigroup_1.keepQueryResultSemigroup();
    return (function (Component) {
        return (function (_super) {
            __extends(DeclareQueriesWrapper, _super);
            function DeclareQueriesWrapper() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.state = {
                    result: QR.queryResultLoading
                };
                _this.product = Query_1.product(queries);
                _this.subscription = O.none;
                return _this;
            }
            DeclareQueriesWrapper.prototype.subscribe = function () {
                var _this = this;
                this.subscription = O.some(Observable_1.observable
                    .map(observe_1.observeShallow(this.product, this.props.queries), function (r) {
                    return _resultSemigroup.concat(_this.state.result, r);
                })
                    .subscribe(function (result) {
                    _this.setState({ result: result });
                }));
            };
            DeclareQueriesWrapper.prototype.unsubscribe = function () {
                O.option.map(this.subscription, function (s) { return s.unsubscribe(); });
            };
            DeclareQueriesWrapper.prototype.componentDidMount = function () {
                this.subscribe();
            };
            DeclareQueriesWrapper.prototype.componentDidUpdate = function (prevProps) {
                if (!this.product.inputEq.equals(prevProps.queries, this.props.queries)) {
                    this.unsubscribe();
                    this.subscribe();
                }
            };
            DeclareQueriesWrapper.prototype.componentWillUnmount = function () {
                this.unsubscribe();
            };
            DeclareQueriesWrapper.prototype.render = function () {
                var _a = this.props, _ = _a.queries, props = __rest(_a, ["queries"]);
                return React.createElement(Component, __assign({}, props, { queries: this.state.result }));
            };
            return DeclareQueriesWrapper;
        }(React.Component));
    });
}
exports.declareQueries = declareQueries;
