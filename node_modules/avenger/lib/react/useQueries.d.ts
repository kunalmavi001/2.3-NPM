import { Semigroup } from 'fp-ts/lib/Semigroup';
import * as QR from '../QueryResult';
import { ObservableQuery } from '../Query';
import { EnforceNonEmptyRecord, ObservableQueries, ProductL, ProductP, ProductA, VoidInputObservableQueries } from '../util';
export declare function useQuery<L, P>(query: ObservableQuery<void, L, P>, params?: void, resultSemigroup?: Semigroup<QR.QueryResult<L, P>>): QR.QueryResult<L, P>;
export declare function useQuery<A, L, P>(query: ObservableQuery<A, L, P>, params: A, resultSemigroup?: Semigroup<QR.QueryResult<L, P>>): QR.QueryResult<L, P>;
export declare function useQueries<R extends VoidInputObservableQueries>(queries: EnforceNonEmptyRecord<R>, input?: ProductA<R>, resultSemigroup?: Semigroup<QR.QueryResult<ProductL<R>, ProductP<R>>>): QR.QueryResult<ProductL<R>, ProductP<R>>;
export declare function useQueries<R extends ObservableQueries>(queries: EnforceNonEmptyRecord<R>, input: ProductA<R>, resultSemigroup?: Semigroup<QR.QueryResult<ProductL<R>, ProductP<R>>>): QR.QueryResult<ProductL<R>, ProductP<R>>;
export default useQueries;
