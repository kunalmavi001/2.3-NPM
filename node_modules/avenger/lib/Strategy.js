"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.strategy = exports.eqShallow = exports.shallowEqual = exports.expire = exports.refetch = exports.available = exports.fromSuccessFilter = exports.URI = void 0;
var CV = require("./CacheValue");
var Eq = require("fp-ts/lib/Eq");
var function_1 = require("fp-ts/lib/function");
exports.URI = 'Strategy';
function fromSuccessFilter(inputEq, filter, cacheValueEq) {
    return {
        inputEq: inputEq,
        filter: CV.fold(function_1.constTrue, function_1.constTrue, function_1.constFalse, filter),
        cacheValueEq: cacheValueEq
    };
}
exports.fromSuccessFilter = fromSuccessFilter;
function available(inputEq, cacheValueEq) {
    return fromSuccessFilter(inputEq, function_1.constTrue, cacheValueEq);
}
exports.available = available;
function refetch(inputEq, cacheValueEq) {
    return fromSuccessFilter(inputEq, function_1.constFalse, cacheValueEq);
}
exports.refetch = refetch;
function expire(afterMs) {
    return function (inputEq, cacheValueEq) {
        return fromSuccessFilter(inputEq, function (_, updated) { return updated.getTime() >= Date.now() - afterMs; }, cacheValueEq);
    };
}
exports.expire = expire;
function shallowEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (typeof a !== typeof b) {
        return false;
    }
    if (typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b)) {
        return true;
    }
    if ((a == null && b != null) || (a != null && b == null)) {
        return false;
    }
    if (typeof a === 'object' && typeof b === 'object') {
        for (var k in a) {
            if (a[k] !== b[k]) {
                return false;
            }
        }
        for (var k in b) {
            if (a[k] !== b[k]) {
                return false;
            }
        }
        return true;
    }
    return false;
}
exports.shallowEqual = shallowEqual;
exports.eqShallow = Eq.fromEquals(shallowEqual);
exports.strategy = {
    URI: exports.URI
};
