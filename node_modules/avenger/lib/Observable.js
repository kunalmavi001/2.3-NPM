"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMonoid = exports.map = exports.flatten = exports.chainFirst = exports.chain = exports.apSecond = exports.apFirst = exports.ap = exports.alt = exports.observable = exports.URI = void 0;
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var pipeable_1 = require("fp-ts/lib/pipeable");
var function_1 = require("fp-ts/lib/function");
exports.URI = 'Observable';
exports.observable = {
    URI: exports.URI,
    map: function (fa, f) { return fa.pipe(operators_1.map(f)); },
    of: rxjs_1.of,
    ap: function (fab, fa) { return rxjs_1.combineLatest(fab, fa, function (f, a) { return f(a); }); },
    chain: function (fa, f) { return fa.pipe(operators_1.switchMap(f)); },
    zero: function_1.constant(rxjs_1.EMPTY),
    alt: function (x, y) { return rxjs_1.merge(x, y()); }
};
var _a = pipeable_1.pipeable(exports.observable), alt = _a.alt, ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, chain = _a.chain, chainFirst = _a.chainFirst, flatten = _a.flatten, map = _a.map;
exports.alt = alt;
exports.ap = ap;
exports.apFirst = apFirst;
exports.apSecond = apSecond;
exports.chain = chain;
exports.chainFirst = chainFirst;
exports.flatten = flatten;
exports.map = map;
exports.getMonoid = function () {
    return {
        concat: function (x, y) { return rxjs_1.merge(x, y); },
        empty: rxjs_1.EMPTY
    };
};
