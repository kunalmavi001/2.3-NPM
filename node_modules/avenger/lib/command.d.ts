import { Fetch } from './Query';
import * as TE from 'fp-ts/lib/TaskEither';
import { EnforceNonEmptyRecord, ProductA, ProductL, ObservableQueries, VoidInputObservableQueries } from './util';
export declare function command<A, L, P, I extends VoidInputObservableQueries, IL extends ProductL<I>>(cmd: Fetch<A, L, P>, queries: EnforceNonEmptyRecord<I>): (a: A, ia?: ProductA<I>) => TE.TaskEither<L | IL, P>;
export declare function command<A, L, P, I extends ObservableQueries, IL extends ProductL<I>>(cmd: Fetch<A, L, P>, queries: EnforceNonEmptyRecord<I>): (a: A, ia: ProductA<I>) => TE.TaskEither<L | IL, P>;
export declare function command<A, L, P>(cmd: Fetch<A, L, P>, queries?: never): (a: A, ia?: never) => TE.TaskEither<L, P>;
export declare function command<A, L, P>(cmd: Fetch<A, L, P>, queries?: never): (a: A, ia?: never) => TE.TaskEither<L, P>;
export declare function contramap<U, L, A, B>(fa: (a: U) => TE.TaskEither<L, A>, f: (a: B) => U): (a: B) => TE.TaskEither<L, A>;
