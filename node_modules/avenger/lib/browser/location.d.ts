import * as Q from '../Query';
import * as TE from 'fp-ts/lib/TaskEither';
export declare type HistoryLocation = {
    pathname: string;
    search: {
        [k: string]: string | undefined;
    };
};
export declare const requestConfirmationToUpdateLocation: () => (() => void);
export declare const location: Q.CachedQuery<void, void, HistoryLocation>;
export declare const doUpdateLocation: (a: HistoryLocation, ia?: undefined) => TE.TaskEither<void, void>;
export declare const pendingUpdateLocation: Q.CachedQuery<void, void, boolean>;
export declare const doResolvePendingUpdateLocation: (a: boolean, ia?: void | undefined) => TE.TaskEither<void, void>;
export declare function getCurrentView<A>(f: (location: HistoryLocation) => A): Q.ObservableQuery<void, void, A>;
export declare function getDoUpdateCurrentView<A>(f: (currentView: A) => HistoryLocation): (a: A) => TE.TaskEither<void, void>;
