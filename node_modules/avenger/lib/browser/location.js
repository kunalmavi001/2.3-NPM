"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDoUpdateCurrentView = exports.getCurrentView = exports.doResolvePendingUpdateLocation = exports.pendingUpdateLocation = exports.doUpdateLocation = exports.location = exports.requestConfirmationToUpdateLocation = void 0;
var history_1 = require("history");
var invalidate_1 = require("../invalidate");
var Q = require("../Query");
var TE = require("fp-ts/lib/TaskEither");
var S = require("../Strategy");
var CV = require("../CacheValue");
var Eq = require("fp-ts/lib/Eq");
var command_1 = require("../command");
var E = require("fp-ts/lib/Either");
var qs_1 = require("qs");
var _setListener = false;
var _historyBlockCallback = null;
exports.requestConfirmationToUpdateLocation = function () {
    return history.block(function () { return ''; });
};
var history = history_1.createBrowserHistory({
    getUserConfirmation: function (_, callback) {
        _historyBlockCallback = callback;
        invalidate_1.invalidate({ pendingUpdateLocation: exports.pendingUpdateLocation })();
    }
});
exports.location = Q.query(function () {
    if (!_setListener) {
        setListener();
    }
    var search = qs_1.parse(history.location.search, {
        ignoreQueryPrefix: true
    });
    return TE.taskEither.of({
        pathname: history.location.pathname,
        search: search
    });
})(S.refetch(Eq.eqStrict, CV.getEq(Eq.eqStrict, Eq.getStructEq({
    pathname: Eq.eqString,
    search: S.eqShallow
}))));
function setListener() {
    history.listen(function () {
        invalidate_1.invalidate({ location: exports.location })();
    });
    _setListener = true;
}
exports.doUpdateLocation = command_1.command(function (_a) {
    var search = _a.search, pathname = _a.pathname;
    return function () {
        return new Promise(function (resolve) {
            var searchQuery = Object.keys(search).length > 0
                ? "?" + qs_1.stringify(search, { skipNulls: true })
                : '';
            var sanitizedPathname = "/" + pathname.trim().replace(/^[\/]+/, '');
            if (sanitizedPathname !== history.location.pathname ||
                searchQuery !== history.location.search) {
                var url = "" + sanitizedPathname + searchQuery;
                history.push(url);
            }
            resolve(E.right(undefined));
        });
    };
});
exports.pendingUpdateLocation = Q.query(function () {
    return TE.taskEither.of(!!_historyBlockCallback);
})(S.refetch(Eq.eqStrict, CV.getEq(Eq.eqStrict, Eq.eqBoolean)));
exports.doResolvePendingUpdateLocation = command_1.command(function (confirm) {
    return TE.fromIOEither(function () {
        var callback = _historyBlockCallback;
        _historyBlockCallback = null;
        if (callback) {
            callback(confirm);
        }
        return E.right(undefined);
    });
}, { location: exports.location, pendingUpdateLocation: exports.pendingUpdateLocation });
function getCurrentView(f) {
    return Q.map(exports.location, f);
}
exports.getCurrentView = getCurrentView;
function getDoUpdateCurrentView(f) {
    return command_1.contramap(exports.doUpdateLocation, f);
}
exports.getDoUpdateCurrentView = getDoUpdateCurrentView;
