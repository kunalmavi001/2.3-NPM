"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.observeShallow = exports.observeStrict = exports.observe = exports.cacheValueToQueryResult = void 0;
var QR = require("./QueryResult");
var Observable_1 = require("./Observable");
var operators_1 = require("rxjs/operators");
var R = require("fp-ts/lib/Record");
var Eq = require("fp-ts/lib/Eq");
var S = require("./Strategy");
var CV = require("./CacheValue");
var pipeable_1 = require("fp-ts/lib/pipeable");
function cacheValueToQueryResult(cacheValue) {
    return pipeable_1.pipe(cacheValue, CV.fold(function () { return QR.queryResultLoading; }, function () { return QR.queryResultLoading; }, function (value) { return QR.queryResultFailure(value, false); }, function (value) { return QR.queryResultSuccess(value, false); }));
}
exports.cacheValueToQueryResult = cacheValueToQueryResult;
var sequenceRecordObservable = R.sequence(Observable_1.observable);
var sequenceRecordQueryResult = R.sequence(QR.queryResult);
function _observe(query, input) {
    switch (query.type) {
        case 'composition':
            var masterObservable = _observe(query.master, input);
            return Observable_1.observable.chain(masterObservable, QR.fold(function () { return Observable_1.observable.of(QR.queryResultLoading); }, function (error) { return Observable_1.observable.of(QR.queryResultFailure(error, false)); }, function (value) { return _observe(query.slave, value); }));
        case 'product':
            return pipeable_1.pipe(query.queries, R.mapWithIndex(function (k, query) {
                return _observe(query, (input || {})[k]);
            }), sequenceRecordObservable).pipe(operators_1.map(sequenceRecordQueryResult));
        case 'cached':
            return query.cache.observe(input).pipe(operators_1.map(cacheValueToQueryResult));
    }
}
function observe(query, input, resultEq) {
    return _observe(query, input).pipe(operators_1.distinctUntilChanged(resultEq.equals));
}
exports.observe = observe;
function observeStrict(query, input) {
    return _observe(query, input).pipe(operators_1.distinctUntilChanged(QR.getEq(Eq.eqStrict, Eq.eqStrict).equals));
}
exports.observeStrict = observeStrict;
function observeShallow(query, input) {
    return _observe(query, input).pipe(operators_1.distinctUntilChanged(QR.getEq(S.eqShallow, S.eqShallow).equals));
}
exports.observeShallow = observeShallow;
