"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEq = exports.mapLeft = exports.map = exports.flatten = exports.chainFirst = exports.chain = exports.bimap = exports.apSecond = exports.apFirst = exports.ap = exports.queryResult = exports.fold = exports.queryResultSuccess = exports.queryResultFailure = exports.queryResultLoading = exports.URI = void 0;
var Eq = require("fp-ts/lib/Eq");
var function_1 = require("fp-ts/lib/function");
var pipeable_1 = require("fp-ts/lib/pipeable");
exports.URI = 'QueryResult';
exports.queryResultLoading = {
    _tag: 'Loading'
};
function queryResultFailure(failure, loading) {
    return { _tag: 'Failure', failure: failure, loading: loading };
}
exports.queryResultFailure = queryResultFailure;
function queryResultSuccess(success, loading) {
    return { _tag: 'Success', success: success, loading: loading };
}
exports.queryResultSuccess = queryResultSuccess;
function fold(onLoading, onFailure, onSuccess) {
    return function (ma) {
        switch (ma._tag) {
            case 'Loading':
                return onLoading();
            case 'Failure':
                return onFailure(ma.failure, ma.loading);
            case 'Success':
                return onSuccess(ma.success, ma.loading);
        }
    };
}
exports.fold = fold;
function _map(fa, f) {
    return pipeable_1.pipe(fa, fold(function_1.constant(exports.queryResultLoading), queryResultFailure, function (success, loading) {
        return queryResultSuccess(f(success), loading);
    }));
}
function _of(success) {
    return queryResultSuccess(success, false);
}
function _mapLeft(fa, l) {
    return pipeable_1.pipe(fa, fold(function_1.constant(exports.queryResultLoading), function (failure, loading) { return queryResultFailure(l(failure), loading); }, queryResultSuccess));
}
function _bimap(fa, l, r) {
    return pipeable_1.pipe(fa, fold(function_1.constant(exports.queryResultLoading), function (failure, loading) { return queryResultFailure(l(failure), loading); }, function (success, loading) { return queryResultSuccess(r(success), loading); }));
}
function _chain(fa, f) {
    return pipeable_1.pipe(fa, fold(function_1.constant(exports.queryResultLoading), queryResultFailure, f));
}
function _alt(fx, fy) {
    return pipeable_1.pipe(fx, fold(fy, fy, queryResultSuccess));
}
exports.queryResult = {
    URI: exports.URI,
    map: _map,
    ap: function (fab, fa) { return _chain(fab, function (f) { return _map(fa, f); }); },
    of: _of,
    mapLeft: _mapLeft,
    bimap: _bimap,
    chain: _chain,
    alt: _alt
};
var _a = pipeable_1.pipeable(exports.queryResult), ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, bimap = _a.bimap, chain = _a.chain, chainFirst = _a.chainFirst, flatten = _a.flatten, map = _a.map, mapLeft = _a.mapLeft;
exports.ap = ap;
exports.apFirst = apFirst;
exports.apSecond = apSecond;
exports.bimap = bimap;
exports.chain = chain;
exports.chainFirst = chainFirst;
exports.flatten = flatten;
exports.map = map;
exports.mapLeft = mapLeft;
function getEq(Eqe, Eqa) {
    return Eq.fromEquals(function (a, b) {
        return pipeable_1.pipe(a, fold(function () { return b._tag === 'Loading'; }, function (fa) {
            return pipeable_1.pipe(b, fold(function_1.constFalse, function (fb) { return Eqe.equals(fa, fb); }, function_1.constFalse));
        }, function (sa) {
            return pipeable_1.pipe(b, fold(function_1.constFalse, function_1.constFalse, function (sb) { return Eqa.equals(sa, sb); }));
        }));
    });
}
exports.getEq = getEq;
