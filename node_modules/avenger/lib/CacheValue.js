"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEq = exports.fold = exports.cacheValueResolved = exports.cacheValueError = exports.cacheValuePending = exports.cacheValueInitial = void 0;
var Eq_1 = require("fp-ts/lib/Eq");
var function_1 = require("fp-ts/lib/function");
var pipeable_1 = require("fp-ts/lib/pipeable");
exports.cacheValueInitial = { _tag: 'Initial' };
function cacheValuePending(pending, updated) {
    return { _tag: 'Pending', pending: pending, updated: updated };
}
exports.cacheValuePending = cacheValuePending;
function cacheValueError(error, updated) {
    return { _tag: 'Error', error: error, updated: updated };
}
exports.cacheValueError = cacheValueError;
function cacheValueResolved(resolved, updated) {
    return { _tag: 'Resolved', resolved: resolved, updated: updated };
}
exports.cacheValueResolved = cacheValueResolved;
function fold(onCacheValueInitial, onCacheValuePending, onCacheValueError, onCacheValueResolved) {
    return function (ma) {
        switch (ma._tag) {
            case 'Initial':
                return onCacheValueInitial();
            case 'Pending':
                return onCacheValuePending(ma.pending, ma.updated);
            case 'Error':
                return onCacheValueError(ma.error, ma.updated);
            case 'Resolved':
                return onCacheValueResolved(ma.resolved, ma.updated);
        }
    };
}
exports.fold = fold;
function getEq(Eqe, Eqa) {
    return Eq_1.fromEquals(function (a, b) {
        return pipeable_1.pipe(a, fold(function_1.constant(b._tag === 'Initial'), function_1.constant(b._tag === 'Pending'), function (ea) {
            return pipeable_1.pipe(b, fold(function_1.constFalse, function_1.constFalse, function (eb) { return Eqe.equals(ea, eb); }, function_1.constFalse));
        }, function (sa) {
            return pipeable_1.pipe(b, fold(function_1.constFalse, function_1.constFalse, function_1.constFalse, function (sb) { return Eqa.equals(sa, sb); }));
        }));
    });
}
exports.getEq = getEq;
