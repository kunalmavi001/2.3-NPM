import { Alternative1 } from 'fp-ts/lib/Alternative';
import { Monad1 } from 'fp-ts/lib/Monad';
import { Monoid } from 'fp-ts/lib/Monoid';
import { Observable } from 'rxjs';
declare module 'rxjs/internal/Observable' {
    interface Observable<T> {
        readonly _URI: URI;
        readonly _A: T;
    }
}
declare module 'fp-ts/lib/HKT' {
    interface URItoKind<A> {
        Observable: Observable<A>;
    }
}
export declare const URI = "Observable";
export declare type URI = typeof URI;
export declare const observable: Monad1<URI> & Alternative1<URI>;
declare const alt: <A>(that: import("fp-ts/lib/function").Lazy<Observable<A>>) => (fa: Observable<A>) => Observable<A>, ap: <A>(fa: Observable<A>) => <B>(fab: Observable<(a: A) => B>) => Observable<B>, apFirst: <B>(fb: Observable<B>) => <A>(fa: Observable<A>) => Observable<A>, apSecond: <B>(fb: Observable<B>) => <A>(fa: Observable<A>) => Observable<B>, chain: <A, B>(f: (a: A) => Observable<B>) => (ma: Observable<A>) => Observable<B>, chainFirst: <A, B>(f: (a: A) => Observable<B>) => (ma: Observable<A>) => Observable<A>, flatten: <A>(mma: Observable<Observable<A>>) => Observable<A>, map: <A, B>(f: (a: A) => B) => (fa: Observable<A>) => Observable<B>;
export { alt, ap, apFirst, apSecond, chain, chainFirst, flatten, map };
export declare const getMonoid: <A = never>() => Monoid<Observable<A>>;
